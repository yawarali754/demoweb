{"ast":null,"code":"import { toast } from 'react-toastify';\nexport const getoffersService = () => {\n  const GET_OFFER_API = `https://ota-structured.herokuapp.com/api/offer/read_offer`;\n  const parameters = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    return fetch(GET_OFFER_API, parameters).then(response => {\n      if (response.status >= 300) {\n        throw new Error('Server response with Error');\n      }\n\n      return response.json();\n    }).then(json => {\n      return json;\n    });\n  } catch (error) {\n    return error;\n  }\n};\nexport const createOfferSerive = request => {\n  const CREATE_OFFER_API = `https://ota-structured.herokuapp.com/api/offer/create_offer`;\n  const parameters = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(request.offer)\n  };\n\n  try {\n    return fetch(CREATE_OFFER_API, parameters).then(response => {\n      if (response.status >= 300) {\n        throw new Error('Server response with Error');\n      }\n\n      return response.json();\n    }).then(json => {\n      return json;\n    });\n  } catch (error) {\n    return error;\n  }\n};\nexport const deleteOfferSerive = request => {\n  const DELETE_OFFER_API = `https://ota-structured.herokuapp.com/api/offer/delete_offer`;\n  const parameters = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(request.offerId)\n  };\n\n  try {\n    return fetch(DELETE_OFFER_API, parameters).then(response => {\n      if (response.status >= 300) {\n        throw new Error('Server response with Error');\n      }\n\n      return response.json();\n    }).then(json => {\n      toast.success(json.msg, {\n        position: 'bottom-right'\n      });\n      return json;\n    });\n  } catch (error) {\n    return error;\n  }\n};\nexport const updateOfferSerive = request => {\n  const UPDATE_OFFER_API = `https://ota-structured.herokuapp.com/api/offer/update_offer`;\n  const parameters = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(request.offerUpdateId)\n  };\n\n  try {\n    return fetch(UPDATE_OFFER_API, parameters).then(response => {\n      if (response.status >= 300) {\n        throw new Error('Server response with Error');\n      }\n\n      return response.json();\n    }).then(json => {\n      toast.success(json.msg, {\n        position: 'bottom-right'\n      });\n      return json;\n    });\n  } catch (error) {\n    toast.error(error.message, {\n      position: 'bottom-right'\n    });\n    return error.message;\n  }\n};","map":{"version":3,"sources":["D:/flight380-Mar12-master/redux/services/offerService.js"],"names":["toast","getoffersService","GET_OFFER_API","parameters","method","headers","fetch","then","response","status","Error","json","error","createOfferSerive","request","CREATE_OFFER_API","body","JSON","stringify","offer","deleteOfferSerive","DELETE_OFFER_API","offerId","success","msg","position","updateOfferSerive","UPDATE_OFFER_API","offerUpdateId","message"],"mappings":"AAAA,SAASA,KAAT,QAAsB,gBAAtB;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAM;AACpC,QAAMC,aAAa,GAAI,2DAAvB;AACA,QAAMC,UAAU,GAAG;AACjBC,IAAAA,MAAM,EAAE,KADS;AAEjBC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AAFQ,GAAnB;;AAMA,MAAI;AACF,WAAOC,KAAK,CAACJ,aAAD,EAAgBC,UAAhB,CAAL,CACJI,IADI,CACEC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAvB,EAA4B;AAC1B,cAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;AACD;;AACD,aAAOF,QAAQ,CAACG,IAAT,EAAP;AACD,KANI,EAOJJ,IAPI,CAOEI,IAAD,IAAU;AACd,aAAOA,IAAP;AACD,KATI,CAAP;AAUD,GAXD,CAWE,OAAOC,KAAP,EAAc;AACd,WAAOA,KAAP;AACD;AACF,CAtBM;AAwBP,OAAO,MAAMC,iBAAiB,GAAIC,OAAD,IAAa;AAC5C,QAAMC,gBAAgB,GAAI,6DAA1B;AACA,QAAMZ,UAAU,GAAG;AACjBC,IAAAA,MAAM,EAAE,MADS;AAEjBC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFQ;AAKjBW,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,OAAO,CAACK,KAAvB;AALW,GAAnB;;AAOA,MAAI;AACF,WAAOb,KAAK,CAACS,gBAAD,EAAmBZ,UAAnB,CAAL,CACJI,IADI,CACEC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAvB,EAA4B;AAC1B,cAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;AACD;;AACD,aAAOF,QAAQ,CAACG,IAAT,EAAP;AACD,KANI,EAOJJ,IAPI,CAOEI,IAAD,IAAU;AACd,aAAOA,IAAP;AACD,KATI,CAAP;AAUD,GAXD,CAWE,OAAOC,KAAP,EAAc;AACd,WAAOA,KAAP;AACD;AACF,CAvBM;AAwBP,OAAO,MAAMQ,iBAAiB,GAAIN,OAAD,IAAa;AAC5C,QAAMO,gBAAgB,GAAI,6DAA1B;AACA,QAAMlB,UAAU,GAAG;AACjBC,IAAAA,MAAM,EAAE,MADS;AAEjBC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFQ;AAKjBW,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,OAAO,CAACQ,OAAvB;AALW,GAAnB;;AAOA,MAAI;AACF,WAAOhB,KAAK,CAACe,gBAAD,EAAmBlB,UAAnB,CAAL,CACJI,IADI,CACEC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAvB,EAA4B;AAC1B,cAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;AACD;;AACD,aAAOF,QAAQ,CAACG,IAAT,EAAP;AACD,KANI,EAOJJ,IAPI,CAOEI,IAAD,IAAU;AACdX,MAAAA,KAAK,CAACuB,OAAN,CAAcZ,IAAI,CAACa,GAAnB,EAAwB;AACtBC,QAAAA,QAAQ,EAAE;AADY,OAAxB;AAGA,aAAOd,IAAP;AACD,KAZI,CAAP;AAaD,GAdD,CAcE,OAAOC,KAAP,EAAc;AACd,WAAOA,KAAP;AACD;AACF,CA1BM;AA2BP,OAAO,MAAMc,iBAAiB,GAAIZ,OAAD,IAAa;AAC5C,QAAMa,gBAAgB,GAAI,6DAA1B;AACA,QAAMxB,UAAU,GAAG;AACjBC,IAAAA,MAAM,EAAE,MADS;AAEjBC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFQ;AAKjBW,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,OAAO,CAACc,aAAvB;AALW,GAAnB;;AAOA,MAAI;AACF,WAAOtB,KAAK,CAACqB,gBAAD,EAAmBxB,UAAnB,CAAL,CACJI,IADI,CACEC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAvB,EAA4B;AAC1B,cAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;AACD;;AACD,aAAOF,QAAQ,CAACG,IAAT,EAAP;AACD,KANI,EAOJJ,IAPI,CAOEI,IAAD,IAAU;AACdX,MAAAA,KAAK,CAACuB,OAAN,CAAcZ,IAAI,CAACa,GAAnB,EAAwB;AACtBC,QAAAA,QAAQ,EAAE;AADY,OAAxB;AAGA,aAAOd,IAAP;AACD,KAZI,CAAP;AAaD,GAdD,CAcE,OAAOC,KAAP,EAAc;AACdZ,IAAAA,KAAK,CAACY,KAAN,CAAYA,KAAK,CAACiB,OAAlB,EAA2B;AACzBJ,MAAAA,QAAQ,EAAE;AADe,KAA3B;AAGA,WAAOb,KAAK,CAACiB,OAAb;AACD;AACF,CA7BM","sourcesContent":["import { toast } from 'react-toastify'\n\nexport const getoffersService = () => {\n  const GET_OFFER_API = `https://ota-structured.herokuapp.com/api/offer/read_offer`\n  const parameters = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  }\n  try {\n    return fetch(GET_OFFER_API, parameters)\n      .then((response) => {\n        if (response.status >= 300) {\n          throw new Error('Server response with Error')\n        }\n        return response.json()\n      })\n      .then((json) => {\n        return json\n      })\n  } catch (error) {\n    return error\n  }\n}\n\nexport const createOfferSerive = (request) => {\n  const CREATE_OFFER_API = `https://ota-structured.herokuapp.com/api/offer/create_offer`\n  const parameters = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(request.offer),\n  }\n  try {\n    return fetch(CREATE_OFFER_API, parameters)\n      .then((response) => {\n        if (response.status >= 300) {\n          throw new Error('Server response with Error')\n        }\n        return response.json()\n      })\n      .then((json) => {\n        return json\n      })\n  } catch (error) {\n    return error\n  }\n}\nexport const deleteOfferSerive = (request) => {\n  const DELETE_OFFER_API = `https://ota-structured.herokuapp.com/api/offer/delete_offer`\n  const parameters = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(request.offerId),\n  }\n  try {\n    return fetch(DELETE_OFFER_API, parameters)\n      .then((response) => {\n        if (response.status >= 300) {\n          throw new Error('Server response with Error')\n        }\n        return response.json()\n      })\n      .then((json) => {\n        toast.success(json.msg, {\n          position: 'bottom-right',\n        })\n        return json\n      })\n  } catch (error) {\n    return error\n  }\n}\nexport const updateOfferSerive = (request) => {\n  const UPDATE_OFFER_API = `https://ota-structured.herokuapp.com/api/offer/update_offer`\n  const parameters = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(request.offerUpdateId),\n  }\n  try {\n    return fetch(UPDATE_OFFER_API, parameters)\n      .then((response) => {\n        if (response.status >= 300) {\n          throw new Error('Server response with Error')\n        }\n        return response.json()\n      })\n      .then((json) => {\n        toast.success(json.msg, {\n          position: 'bottom-right',\n        })\n        return json\n      })\n  } catch (error) {\n    toast.error(error.message, {\n      position: 'bottom-right',\n    })\n    return error.message\n  }\n}\n"]},"metadata":{},"sourceType":"module"}