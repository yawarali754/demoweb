{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as types from '../actions/flightActions';\nexport const fligthSearch = (state = {}, action) => {\n  let response = action;\n\n  switch (action.type) {\n    case types.REQUEST_FLIGHT_DATA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        searchData: action.data,\n        loading: true\n      });\n\n    case types.RECIEVE_FLIGHT_DATA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        response,\n        loading: false\n      });\n\n    case types.FLIGHT_SEARCH_FAILED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        response,\n        loading: false\n      });\n\n    case types.FLIGHT_REVALIDATE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        validation: action.flightData\n      });\n\n    case types.REC_FLIGHT_VALIDATION:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        res: action\n      });\n\n    case types.FLIGHT_NOT_VALID:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        res: action,\n        error\n      });\n\n    case types.CREATE_PNR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        pnrRequest: action.pnrRequest,\n        loading: true\n      });\n\n    case types.PNR_CREATED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        created: action,\n        loading: false\n      });\n\n    case types.PNR_CREATION_FAILED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action,\n        loading: false\n      });\n\n    case types.SAVE_BOOKING:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        saveBooking: action.saveBooking\n      });\n\n    case types.BOOKING_SAVED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        bookingSaved: action\n      });\n\n    case types.SAVE_BOOKING_FAILED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action,\n        loading: false\n      });\n\n    case types.GET_SAVE_BOOKING:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        bookingMail: action.bookingMail,\n        loading: true\n      });\n\n    case types.SAVED_BOOKING_RECEIVED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        savedBookingRec: action,\n        loading: false\n      });\n\n    case types.GET_SAVE_BOOKING_FAILED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action,\n        loading: false\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["D:/flight380-Mar12-master/redux/reducers/flightReducer.js"],"names":["types","fligthSearch","state","action","response","type","REQUEST_FLIGHT_DATA","searchData","data","loading","RECIEVE_FLIGHT_DATA","FLIGHT_SEARCH_FAILED","FLIGHT_REVALIDATE","validation","flightData","REC_FLIGHT_VALIDATION","res","FLIGHT_NOT_VALID","error","CREATE_PNR","pnrRequest","PNR_CREATED","created","PNR_CREATION_FAILED","SAVE_BOOKING","saveBooking","BOOKING_SAVED","bookingSaved","SAVE_BOOKING_FAILED","GET_SAVE_BOOKING","bookingMail","SAVED_BOOKING_RECEIVED","savedBookingRec","GET_SAVE_BOOKING_FAILED"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,0BAAvB;AAEA,OAAO,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAClD,MAAIC,QAAQ,GAAGD,MAAf;;AACA,UAAQA,MAAM,CAACE,IAAf;AACE,SAAKL,KAAK,CAACM,mBAAX;AACE,6CACKJ,KADL;AAEEK,QAAAA,UAAU,EAAEJ,MAAM,CAACK,IAFrB;AAGEC,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKT,KAAK,CAACU,mBAAX;AACE,6CACKR,KADL;AAEEE,QAAAA,QAFF;AAGEK,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKT,KAAK,CAACW,oBAAX;AACE,6CAAYT,KAAZ;AAAmBE,QAAAA,QAAnB;AAA6BK,QAAAA,OAAO,EAAE;AAAtC;;AACF,SAAKT,KAAK,CAACY,iBAAX;AACE,6CAAYV,KAAZ;AAAmBW,QAAAA,UAAU,EAAEV,MAAM,CAACW;AAAtC;;AACF,SAAKd,KAAK,CAACe,qBAAX;AACE,6CAAYb,KAAZ;AAAmBc,QAAAA,GAAG,EAAEb;AAAxB;;AACF,SAAKH,KAAK,CAACiB,gBAAX;AACE,6CACKf,KADL;AAEEc,QAAAA,GAAG,EAAEb,MAFP;AAGEe,QAAAA;AAHF;;AAKF,SAAKlB,KAAK,CAACmB,UAAX;AACE,6CAAYjB,KAAZ;AAAmBkB,QAAAA,UAAU,EAAEjB,MAAM,CAACiB,UAAtC;AAAkDX,QAAAA,OAAO,EAAE;AAA3D;;AACF,SAAKT,KAAK,CAACqB,WAAX;AACE,6CAAYnB,KAAZ;AAAmBoB,QAAAA,OAAO,EAAEnB,MAA5B;AAAoCM,QAAAA,OAAO,EAAE;AAA7C;;AACF,SAAKT,KAAK,CAACuB,mBAAX;AACE,6CAAYrB,KAAZ;AAAmBgB,QAAAA,KAAK,EAAEf,MAA1B;AAAkCM,QAAAA,OAAO,EAAE;AAA3C;;AACF,SAAKT,KAAK,CAACwB,YAAX;AACE,6CAAYtB,KAAZ;AAAmBuB,QAAAA,WAAW,EAAEtB,MAAM,CAACsB;AAAvC;;AACF,SAAKzB,KAAK,CAAC0B,aAAX;AACE,6CAAYxB,KAAZ;AAAmByB,QAAAA,YAAY,EAAExB;AAAjC;;AACF,SAAKH,KAAK,CAAC4B,mBAAX;AACE,6CAAY1B,KAAZ;AAAmBgB,QAAAA,KAAK,EAAEf,MAA1B;AAAkCM,QAAAA,OAAO,EAAE;AAA3C;;AACF,SAAKT,KAAK,CAAC6B,gBAAX;AACE,6CAAY3B,KAAZ;AAAmB4B,QAAAA,WAAW,EAAE3B,MAAM,CAAC2B,WAAvC;AAAoDrB,QAAAA,OAAO,EAAE;AAA7D;;AACF,SAAKT,KAAK,CAAC+B,sBAAX;AACE,6CAAY7B,KAAZ;AAAmB8B,QAAAA,eAAe,EAAE7B,MAApC;AAA4CM,QAAAA,OAAO,EAAE;AAArD;;AACF,SAAKT,KAAK,CAACiC,uBAAX;AACE,6CAAY/B,KAAZ;AAAmBgB,QAAAA,KAAK,EAAEf,MAA1B;AAAkCM,QAAAA,OAAO,EAAE;AAA3C;;AACF;AACE,aAAOP,KAAP;AA5CJ;AA8CD,CAhDM","sourcesContent":["import * as types from '../actions/flightActions'\n\nexport const fligthSearch = (state = {}, action) => {\n  let response = action\n  switch (action.type) {\n    case types.REQUEST_FLIGHT_DATA:\n      return {\n        ...state,\n        searchData: action.data,\n        loading: true,\n      }\n    case types.RECIEVE_FLIGHT_DATA:\n      return {\n        ...state,\n        response,\n        loading: false,\n      }\n    case types.FLIGHT_SEARCH_FAILED:\n      return { ...state, response, loading: false }\n    case types.FLIGHT_REVALIDATE:\n      return { ...state, validation: action.flightData }\n    case types.REC_FLIGHT_VALIDATION:\n      return { ...state, res: action }\n    case types.FLIGHT_NOT_VALID:\n      return {\n        ...state,\n        res: action,\n        error,\n      }\n    case types.CREATE_PNR:\n      return { ...state, pnrRequest: action.pnrRequest, loading: true }\n    case types.PNR_CREATED:\n      return { ...state, created: action, loading: false }\n    case types.PNR_CREATION_FAILED:\n      return { ...state, error: action, loading: false }\n    case types.SAVE_BOOKING:\n      return { ...state, saveBooking: action.saveBooking }\n    case types.BOOKING_SAVED:\n      return { ...state, bookingSaved: action }\n    case types.SAVE_BOOKING_FAILED:\n      return { ...state, error: action, loading: false }\n    case types.GET_SAVE_BOOKING:\n      return { ...state, bookingMail: action.bookingMail, loading: true }\n    case types.SAVED_BOOKING_RECEIVED:\n      return { ...state, savedBookingRec: action, loading: false }\n    case types.GET_SAVE_BOOKING_FAILED:\n      return { ...state, error: action, loading: false }\n    default:\n      return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}