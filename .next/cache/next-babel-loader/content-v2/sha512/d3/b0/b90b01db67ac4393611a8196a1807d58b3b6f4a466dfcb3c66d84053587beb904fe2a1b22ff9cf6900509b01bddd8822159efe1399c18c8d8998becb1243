{"ast":null,"code":"import { toast } from 'react-toastify';\n\nconst AuthenticationModel = require('./authentication_model');\n\nexport const getFlightService = async request => {\n  const FLIGHT_SEARCH_API = `https://api-crt.cert.havail.sabre.com/v4.2.0/shop/flights?mode=live`;\n  const authModel = new AuthenticationModel({\n    apiEndPoint: 'https://api-crt.cert.havail.sabre.com',\n    secret: process.env.rest_credentials\n  });\n  const abc = await authModel.readRequest(async accessToken => {\n    const parameters = {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(request.data.dataa)\n    };\n    return await fetch(FLIGHT_SEARCH_API, parameters).then(response => {\n      if (response.status >= 300) {\n        throw new Error(`Server responsed with Error ${response.status}`);\n      }\n\n      return response.json();\n    }).then(json => {\n      return json;\n    }).catch(error => {\n      toast.error(error.message, {\n        position: 'bottom-right'\n      });\n      return error.message;\n    });\n  });\n  return abc;\n};\nexport const checkFlightValidation = async request => {\n  const CHECK_VALIDATION = 'https://api-crt.cert.havail.sabre.com/v4/shop/flights/revalidate';\n  const authModel = new AuthenticationModel({\n    apiEndPoint: 'https://api-crt.cert.havail.sabre.com',\n    secret: process.env.rest_credentials\n  });\n  const flightVal = await authModel.readRequest(async accessToken => {\n    const parameters = {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(request.flightData)\n    };\n    return await fetch(CHECK_VALIDATION, parameters).then(response => {\n      if (response.status >= 300) {\n        throw new Error(`Server responsed with Error ${response.status}`);\n      }\n\n      return response.json();\n    }).then(json => {\n      return json;\n    }).catch(error => {\n      toast.error(error.message, {\n        position: 'bottom-right'\n      });\n      return error.message;\n    });\n  });\n  return flightVal;\n};\nexport const createPnrService = async request => {\n  const CREATE_PNR = 'https://api-crt.cert.havail.sabre.com/v2.4.0/passenger/records?mode=create';\n  const authModel = new AuthenticationModel({\n    apiEndPoint: 'https://api-crt.cert.havail.sabre.com',\n    secret: process.env.rest_credentials\n  });\n  const pnr = await authModel.readRequest(async accessToken => {\n    const parameters = {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(request.pnrRequest)\n    };\n    return await fetch(CREATE_PNR, parameters).then(response => {\n      if (response.status >= 300) {\n        throw new Error(`Server responsed with Error ${response.status}`);\n      }\n\n      return response.json();\n    }).then(json => {\n      return json;\n    }).catch(error => {\n      toast.error(error.message, {\n        position: 'bottom-right'\n      });\n      return error.message;\n    });\n  });\n  return pnr;\n};\nexport const createBookingService = request => {\n  const SAVE_BOOKING_API = `https://ota-structured.herokuapp.com/api/booking/save_booking`;\n  const parameters = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(request.saveBooking)\n  };\n\n  try {\n    return fetch(SAVE_BOOKING_API, parameters).then(response => {\n      if (response.status >= 300) {\n        throw new Error('Server response with Error');\n      }\n\n      return response.json();\n    }).then(json => {\n      return json;\n    });\n  } catch (error) {\n    return error;\n  }\n};\nexport const getBookingService = request => {\n  const GET_BOOKING_API = `https://ota-structured.herokuapp.com/api/booking/get_booking`;\n  const parameters = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(request.bookingMail)\n  };\n\n  try {\n    return fetch(GET_BOOKING_API, parameters).then(response => {\n      if (response.status >= 300) {\n        throw new Error('Server response with Error');\n      }\n\n      return response.json();\n    }).then(json => {\n      return json;\n    });\n  } catch (error) {\n    return error;\n  }\n};","map":{"version":3,"sources":["D:/flight380-Mar12-master/redux/services/flightService.js"],"names":["toast","AuthenticationModel","require","getFlightService","request","FLIGHT_SEARCH_API","authModel","apiEndPoint","secret","process","env","rest_credentials","abc","readRequest","accessToken","parameters","method","headers","Authorization","body","JSON","stringify","data","dataa","fetch","then","response","status","Error","json","catch","error","message","position","checkFlightValidation","CHECK_VALIDATION","flightVal","accept","flightData","createPnrService","CREATE_PNR","pnr","pnrRequest","createBookingService","SAVE_BOOKING_API","saveBooking","getBookingService","GET_BOOKING_API","bookingMail"],"mappings":"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","sourcesContent":["import { toast } from 'react-toastify'\n\nconst AuthenticationModel = require('./authentication_model')\n\nexport const getFlightService = async (request) => {\n  const FLIGHT_SEARCH_API = `https://api-crt.cert.havail.sabre.com/v4.2.0/shop/flights?mode=live`\n\n  const authModel = new AuthenticationModel({\n    apiEndPoint: 'https://api-crt.cert.havail.sabre.com',\n    secret: process.env.rest_credentials,\n  })\n  const abc = await authModel.readRequest(async (accessToken) => {\n    const parameters = {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(request.data.dataa),\n    }\n    return await fetch(FLIGHT_SEARCH_API, parameters)\n      .then((response) => {\n        if (response.status >= 300) {\n          throw new Error(`Server responsed with Error ${response.status}`)\n        }\n        return response.json()\n      })\n      .then((json) => {\n        return json\n      })\n      .catch((error) => {\n        toast.error(error.message, {\n          position: 'bottom-right',\n        })\n        return error.message\n      })\n  })\n\n  return abc\n}\nexport const checkFlightValidation = async (request) => {\n  const CHECK_VALIDATION =\n    'https://api-crt.cert.havail.sabre.com/v4/shop/flights/revalidate'\n\n  const authModel = new AuthenticationModel({\n    apiEndPoint: 'https://api-crt.cert.havail.sabre.com',\n    secret: process.env.rest_credentials,\n  })\n  const flightVal = await authModel.readRequest(async (accessToken) => {\n    const parameters = {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(request.flightData),\n    }\n    return await fetch(CHECK_VALIDATION, parameters)\n      .then((response) => {\n        if (response.status >= 300) {\n          throw new Error(`Server responsed with Error ${response.status}`)\n        }\n        return response.json()\n      })\n      .then((json) => {\n        return json\n      })\n      .catch((error) => {\n        toast.error(error.message, {\n          position: 'bottom-right',\n        })\n        return error.message\n      })\n  })\n\n  return flightVal\n}\nexport const createPnrService = async (request) => {\n  const CREATE_PNR =\n    'https://api-crt.cert.havail.sabre.com/v2.4.0/passenger/records?mode=create'\n  const authModel = new AuthenticationModel({\n    apiEndPoint: 'https://api-crt.cert.havail.sabre.com',\n    secret: process.env.rest_credentials,\n  })\n  const pnr = await authModel.readRequest(async (accessToken) => {\n    const parameters = {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(request.pnrRequest),\n    }\n    return await fetch(CREATE_PNR, parameters)\n      .then((response) => {\n        if (response.status >= 300) {\n          throw new Error(`Server responsed with Error ${response.status}`)\n        }\n        return response.json()\n      })\n      .then((json) => {\n        return json\n      })\n      .catch((error) => {\n        toast.error(error.message, {\n          position: 'bottom-right',\n        })\n        return error.message\n      })\n  })\n\n  return pnr\n}\n\nexport const createBookingService = (request) => {\n  const SAVE_BOOKING_API = `https://ota-structured.herokuapp.com/api/booking/save_booking`\n  const parameters = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(request.saveBooking),\n  }\n  try {\n    return fetch(SAVE_BOOKING_API, parameters)\n      .then((response) => {\n        if (response.status >= 300) {\n          throw new Error('Server response with Error')\n        }\n        return response.json()\n      })\n      .then((json) => {\n        return json\n      })\n  } catch (error) {\n    return error\n  }\n}\n\nexport const getBookingService = (request) => {\n  const GET_BOOKING_API = `https://ota-structured.herokuapp.com/api/booking/get_booking`\n  const parameters = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(request.bookingMail),\n  }\n  try {\n    return fetch(GET_BOOKING_API, parameters)\n      .then((response) => {\n        if (response.status >= 300) {\n          throw new Error('Server response with Error')\n        }\n        return response.json()\n      })\n      .then((json) => {\n        return json\n      })\n  } catch (error) {\n    return error\n  }\n}\n"]},"metadata":{},"sourceType":"module"}