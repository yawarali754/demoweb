{"ast":null,"code":"//this file will contain our actions, and api that gonna dispatching a reducer\nimport { put, call } from 'redux-saga/effects';\nimport { getTokenService, loginUserService, registerUserService, setPasswordService, updatePasswordService, verifyEmailService, verifyOtpService } from '../services/authenticationService';\nimport { loginFailed, loginSuccess, logout, setPassSuccess, setPasswordFailed, tokenReceived, tokenRecFailed, verifyEmailFailed, verifyEmailSuccess, verifyOtpFailed, verifyOTPSuccess } from '../actions/authentication';\nimport * as types from '../actions/userActions';\nexport function* getTokenSaga(payload) {\n  try {\n    const tokenRec = yield call(getTokenService, payload);\n    const data = tokenRec;\n    yield put(tokenReceived(data));\n  } catch (error) {\n    yield put(tokenRecFailed(error));\n  }\n}\nexport function* loginSaga(payload) {\n  try {\n    const response = yield call(loginUserService, payload);\n    const data = response;\n    yield put(loginSuccess(data));\n  } catch (error) {\n    yield put({\n      type: types.USER_LOGIN_FAIL,\n      error\n    });\n  }\n}\nexport function* verifyEmailSaga(payload) {\n  try {\n    const res = yield call(verifyEmailService, payload);\n    const data = res;\n    yield put(verifyEmailSuccess(data));\n  } catch (error) {\n    yield put(verifyEmailFailed(error));\n  }\n}\nexport function* verifyOtpSaga(payload) {\n  try {\n    const response = yield call(verifyOtpService, payload);\n    yield put(verifyOTPSuccess(response));\n  } catch (error) {\n    yield put(verifyOtpFailed(response.error));\n  }\n}\nexport function* setPasswordSaga(payload) {\n  try {\n    const pass = yield call(setPasswordService, payload);\n    yield put(setPassSuccess(pass));\n  } catch (error) {\n    yield put(setPasswordFailed(error));\n    return error;\n  }\n}\nexport function* updatePasswordSaga(payload) {\n  try {\n    const updatePass = yield call(updatePasswordService, payload);\n    yield put[{\n      type: types.UPDATE_PASSWORD,\n      updatePass\n    }];\n  } catch (error) {\n    return error;\n  }\n}\nexport function* logOutSaga() {\n  yield put(logout());\n}","map":{"version":3,"sources":["D:/flight380-Mar12-master/redux/sagas/userSaga.js"],"names":["put","call","getTokenService","loginUserService","registerUserService","setPasswordService","updatePasswordService","verifyEmailService","verifyOtpService","loginFailed","loginSuccess","logout","setPassSuccess","setPasswordFailed","tokenReceived","tokenRecFailed","verifyEmailFailed","verifyEmailSuccess","verifyOtpFailed","verifyOTPSuccess","types","getTokenSaga","payload","tokenRec","data","error","loginSaga","response","type","USER_LOGIN_FAIL","verifyEmailSaga","res","verifyOtpSaga","setPasswordSaga","pass","updatePasswordSaga","updatePass","UPDATE_PASSWORD","logOutSaga"],"mappings":"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","sourcesContent":["//this file will contain our actions, and api that gonna dispatching a reducer\nimport { put, call } from 'redux-saga/effects'\nimport {\n  getTokenService,\n  loginUserService,\n  registerUserService,\n  setPasswordService,\n  updatePasswordService,\n  verifyEmailService,\n  verifyOtpService,\n} from '../services/authenticationService'\nimport {\n  loginFailed,\n  loginSuccess,\n  logout,\n  setPassSuccess,\n  setPasswordFailed,\n  tokenReceived,\n  tokenRecFailed,\n  verifyEmailFailed,\n  verifyEmailSuccess,\n  verifyOtpFailed,\n  verifyOTPSuccess,\n} from '../actions/authentication'\nimport * as types from '../actions/userActions'\n\nexport function* getTokenSaga(payload) {\n  try {\n    const tokenRec = yield call(getTokenService, payload)\n    const data = tokenRec\n    yield put(tokenReceived(data))\n  } catch (error) {\n    yield put(tokenRecFailed(error))\n  }\n}\n\nexport function* loginSaga(payload) {\n  try {\n    const response = yield call(loginUserService, payload)\n    const data = response\n    yield put(loginSuccess(data))\n  } catch (error) {\n    yield put({ type: types.USER_LOGIN_FAIL, error })\n  }\n}\nexport function* verifyEmailSaga(payload) {\n  try {\n    const res = yield call(verifyEmailService, payload)\n    const data = res\n    yield put(verifyEmailSuccess(data))\n  } catch (error) {\n    yield put(verifyEmailFailed(error))\n  }\n}\nexport function* verifyOtpSaga(payload) {\n  try {\n    const response = yield call(verifyOtpService, payload)\n    yield put(verifyOTPSuccess(response))\n  } catch (error) {\n    yield put(verifyOtpFailed(response.error))\n  }\n}\nexport function* setPasswordSaga(payload) {\n  try {\n    const pass = yield call(setPasswordService, payload)\n    yield put(setPassSuccess(pass))\n  } catch (error) {\n    yield put(setPasswordFailed(error))\n    return error\n  }\n}\nexport function* updatePasswordSaga(payload) {\n  try {\n    const updatePass = yield call(updatePasswordService, payload)\n    yield put[{ type: types.UPDATE_PASSWORD, updatePass }]\n  } catch (error) {\n    return error\n  }\n}\n\nexport function* logOutSaga() {\n  yield put(logout())\n}\n"]},"metadata":{},"sourceType":"module"}