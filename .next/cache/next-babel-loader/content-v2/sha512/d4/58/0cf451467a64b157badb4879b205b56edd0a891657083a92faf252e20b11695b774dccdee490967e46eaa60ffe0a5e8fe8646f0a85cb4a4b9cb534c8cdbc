{"ast":null,"code":"import { toast } from 'react-toastify';\nexport var getTokenService = function getTokenService(request) {\n  var GET_TOKEN_API = 'https://api-crt.cert.havail.sabre.com/v2/auth/token';\n  var parameters = {\n    method: 'POST',\n    headers: {\n      Authorization: \"Basic \".concat(process.env.rest_credentials),\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    body: request.token\n  };\n\n  try {\n    return fetch(GET_TOKEN_API, parameters).then(function (response) {\n      if (response.status >= 300) {\n        throw new Error('Server response with Error');\n      }\n\n      return response.json();\n    }).then(function (json) {\n      return json;\n    });\n  } catch (error) {\n    toast.error(error.message, {\n      position: 'bottom-right'\n    });\n    return error;\n  }\n};\nexport var loginUserService = function loginUserService(request) {\n  var LOGIN_USER_API = 'https://ota-structured.herokuapp.com/api/auth/login';\n  var parameters = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(request.user)\n  };\n\n  try {\n    return fetch(LOGIN_USER_API, parameters).then(function (response) {\n      if (response.status >= 300) {\n        throw new Error('Server response with Error');\n      }\n\n      return response.json();\n    }).then(function (json) {\n      localStorage.setItem('userInfo', JSON.stringify(json));\n      return json;\n    });\n  } catch (error) {\n    toast.error(error.message, {\n      position: 'bottom-right'\n    });\n    return error;\n  }\n};\nexport var verifyEmailService = function verifyEmailService(request) {\n  var VERIFY_USER_API = 'https://ota-structured.herokuapp.com/api/auth/signup';\n  var parameters = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(request.email)\n  };\n\n  try {\n    return fetch(VERIFY_USER_API, parameters).then(function (response) {\n      if (response.status >= 300) {\n        throw new Error('Error from Server Response');\n      }\n\n      return response.json();\n    }).then(function (json) {\n      return json;\n    });\n  } catch (error) {\n    toast.error(error.msg, {\n      position: 'bottom-right'\n    });\n    return error;\n  }\n};\nexport var verifyOtpService = function verifyOtpService(request) {\n  var VERIFY_OTP_URL = 'https://ota-structured.herokuapp.com/api/auth/otp_ver';\n  var parameters = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(request.otp)\n  };\n\n  try {\n    return fetch(VERIFY_OTP_URL, parameters).then(function (response) {\n      if (response.status >= 300) {\n        throw new Error('Error from Server Response');\n      }\n\n      return response.json();\n    }).then(function (json) {\n      return json;\n    });\n  } catch (error) {\n    toast.error(error.message, {\n      position: 'bottom-right'\n    });\n    return error;\n  }\n};\nexport var setPasswordService = function setPasswordService(request) {\n  var SET_PASSWORD_URL = 'https://ota-structured.herokuapp.com/api/auth/set_pass';\n  var parameters = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(request.password)\n  };\n\n  try {\n    return fetch(SET_PASSWORD_URL, parameters).then(function (response) {\n      if (response.status >= 300) {\n        throw new Error('Error from Server Response');\n      }\n\n      return response.json();\n    }).then(function (json) {\n      return json;\n    });\n  } catch (error) {\n    toast.error(error.message, {\n      position: 'bottom-right'\n    });\n    return error;\n  }\n};\nexport var updatePasswordService = function updatePasswordService(request) {\n  var UPDATE_PASSWORD_URL = 'https://ota-structured.herokuapp.com/api/auth/up_pass';\n  var parameters = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(request.password)\n  };\n\n  try {\n    return fetch(UPDATE_PASSWORD_URL, parameters).then(function (response) {\n      if (response.status >= 300) {\n        throw new Error('Error from Server Response');\n      }\n\n      return response.json();\n    }).then(function (json) {\n      return json;\n    });\n  } catch (error) {\n    toast.error(error.message, {\n      position: 'bottom-right'\n    });\n    return error;\n  }\n};","map":{"version":3,"sources":["D:/flight380-Mar12-master/redux/services/authenticationService.js"],"names":["toast","getTokenService","request","GET_TOKEN_API","parameters","method","headers","Authorization","process","env","rest_credentials","body","token","fetch","then","response","status","Error","json","error","message","position","loginUserService","LOGIN_USER_API","JSON","stringify","user","localStorage","setItem","verifyEmailService","VERIFY_USER_API","email","msg","verifyOtpService","VERIFY_OTP_URL","otp","setPasswordService","SET_PASSWORD_URL","password","updatePasswordService","UPDATE_PASSWORD_URL"],"mappings":"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","sourcesContent":["import { toast } from 'react-toastify'\n\nexport const getTokenService = (request) => {\n  const GET_TOKEN_API = 'https://api-crt.cert.havail.sabre.com/v2/auth/token'\n\n  const parameters = {\n    method: 'POST',\n    headers: {\n      Authorization: `Basic ${process.env.rest_credentials}`,\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: request.token,\n  }\n  try {\n    return fetch(GET_TOKEN_API, parameters)\n      .then((response) => {\n        if (response.status >= 300) {\n          throw new Error('Server response with Error')\n        }\n        return response.json()\n      })\n      .then((json) => {\n        return json\n      })\n  } catch (error) {\n    toast.error(error.message, {\n      position: 'bottom-right',\n    })\n    return error\n  }\n}\n\nexport const loginUserService = (request) => {\n  const LOGIN_USER_API = 'https://ota-structured.herokuapp.com/api/auth/login'\n\n  const parameters = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(request.user),\n  }\n  try {\n    return fetch(LOGIN_USER_API, parameters)\n      .then((response) => {\n        if (response.status >= 300) {\n          throw new Error('Server response with Error')\n        }\n        return response.json()\n      })\n      .then((json) => {\n        localStorage.setItem('userInfo', JSON.stringify(json))\n        return json\n      })\n  } catch (error) {\n    toast.error(error.message, {\n      position: 'bottom-right',\n    })\n    return error\n  }\n}\n\nexport const verifyEmailService = (request) => {\n  const VERIFY_USER_API = 'https://ota-structured.herokuapp.com/api/auth/signup'\n  const parameters = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(request.email),\n  }\n  try {\n    return fetch(VERIFY_USER_API, parameters)\n      .then((response) => {\n        if (response.status >= 300) {\n          throw new Error('Error from Server Response')\n        }\n        return response.json()\n      })\n      .then((json) => {\n        return json\n      })\n  } catch (error) {\n    toast.error(error.msg, {\n      position: 'bottom-right',\n    })\n    return error\n  }\n}\nexport const verifyOtpService = (request) => {\n  const VERIFY_OTP_URL = 'https://ota-structured.herokuapp.com/api/auth/otp_ver'\n  const parameters = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(request.otp),\n  }\n  try {\n    return fetch(VERIFY_OTP_URL, parameters)\n      .then((response) => {\n        if (response.status >= 300) {\n          throw new Error('Error from Server Response')\n        }\n        return response.json()\n      })\n      .then((json) => {\n        return json\n      })\n  } catch (error) {\n    toast.error(error.message, {\n      position: 'bottom-right',\n    })\n    return error\n  }\n}\nexport const setPasswordService = (request) => {\n  const SET_PASSWORD_URL =\n    'https://ota-structured.herokuapp.com/api/auth/set_pass'\n  const parameters = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(request.password),\n  }\n  try {\n    return fetch(SET_PASSWORD_URL, parameters)\n      .then((response) => {\n        if (response.status >= 300) {\n          throw new Error('Error from Server Response')\n        }\n        return response.json()\n      })\n      .then((json) => {\n        return json\n      })\n  } catch (error) {\n    toast.error(error.message, {\n      position: 'bottom-right',\n    })\n    return error\n  }\n}\nexport const updatePasswordService = (request) => {\n  const UPDATE_PASSWORD_URL =\n    'https://ota-structured.herokuapp.com/api/auth/up_pass'\n  const parameters = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(request.password),\n  }\n  try {\n    return fetch(UPDATE_PASSWORD_URL, parameters)\n      .then((response) => {\n        if (response.status >= 300) {\n          throw new Error('Error from Server Response')\n        }\n        return response.json()\n      })\n      .then((json) => {\n        return json\n      })\n  } catch (error) {\n    toast.error(error.message, {\n      position: 'bottom-right',\n    })\n    return error\n  }\n}\n"]},"metadata":{},"sourceType":"module"}